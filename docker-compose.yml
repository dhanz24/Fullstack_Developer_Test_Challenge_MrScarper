services:
  # PostgreSQL
  postgres:
    image: postgres:15
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: appdb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker-init-scripts:/docker-entrypoint-initdb.d
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d appdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7
    container_name: redis_cache
    restart: always
    ports:
      - "6379:6379"
    networks:
      - backend

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq_broker
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    ports:
      - "5672:5672"   # RabbitMQ server
      - "15672:15672" # Web management UI
    networks:
      - backend

  # Product Service
  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    restart: always
    env_file:
      - ./product-service/.env
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
         condition: service_started
      rabbitmq:
        condition: service_started
    networks:
      - backend

  # Order Service
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    restart: always
    env_file:
      - ./order-service/.env
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
         condition: service_started
      rabbitmq:
        condition: service_started
      product-service:
        condition: service_started
    networks:
      - backend

volumes:
  postgres_data:

networks:
  backend:
    driver: bridge
